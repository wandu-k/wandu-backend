# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0


#1
    # 해당 부분은 상당히 중요함 (글에서 부가설명)
    # application.properties는 외부에 노출되면 안되므로 Actions가 빌드될때마다 해당 Repository의 Secret 설정을
    # 이용하여서 설정 파일을 생성해줌 (github에 commit 되는게 아님!)
    - run : touch ./src/main/resources/application.properties
    - run : echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
    - run : cat ./src/main/resources/application.properties
    
    # gradlew에 권한 부여
    - name: Grant execute permission for gradlew
      run: |
         sudo chmod +x ./gradlew
        ./gradlew --debug build

    # 빌드를 성공하면 해당 프로젝트를 zip로 만듬
    # 이름은 run 에서 설정 가능
    - name: Make zip file
      run: zip -r ./<자신이 만들 ZIP 파일 이름>.zip .
      shell: bash

    #2
    # AWS 계정 설정
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
      # 깃허브 Secret에 넣어둔 Access key
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      # 깃허브 Secret에 넣어둔 Secret key
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # 깃허브 Secret에 넣어둔 Region
        aws-region: ${{ secrets.AWS_REGION }}

    #3
    # 만들어 놓은 S3에 해당 zip 파일 저장
    - name: Upload to S3
      run: aws s3 cp --region ${{ secrets.AWS_REGION }} ./<자신이 만든 ZIP 파일 이름>.zip s3://<만들어 놓은 버킷 이름>/<자신이 만든 ZIP 파일 이름>.zip
    
    #4
    # AWS CodeDeploy에 배포
    - name: Deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws deploy create-deployment \
        --application-name <AWS codeDeploy 애플리케이션 이름> \
        --deployment-group-name <codeDeploy group 이름> \
        --file-exists-behavior OVERWRITE \
        --s3-location bucket=<만들어 놓은 버킷 이름>,bundleType=zip,key=<자신이 만든 ZIP 파일 이름>.zip \
        --region ${{ secrets.AWS_REGION }}
